#!/bin/bash

# This project is licensed under the MIT License (see LICENSE).

set -eu

readonly cache="$HOME/.cache/pactrack"

usage() {
    echo 'usage: pactrack [command]

commands:
  add       PKG...   Track packages
  remove|rm PKG...   Untrack packages
  update    [-a]     Track latest version of updated packages
                      -a: all
  prune     [-a|-i]  Untrack packages with installed updates
                      -a: untrack all
                      -u: untrack all updated
  status    [-u]     Show status of tracked packages
                      -u: show only updated'
}

escape_slash() {
    # replace / with \/
    echo "${1//\//\\/}"
}

get_pkg_name() {
    local -a pkg

    # check if string contains /
    if [[ -n "${1##*/*}" ]]; then
        echo "$1 is invalid: expected format <repo>/<package>" >&2
        return 1
    fi

    pkg=(${1//\// })

    if [[ "${#pkg[@]}" -ne 2 ]]; then
        echo "$1 is invalid: expected format <repo>/<package>" >&2
        return 1
    fi

    if ! pacman-conf -l | grep -q "${pkg[0]}"; then
        echo "repo ${pkg[0]} does not exist" >&2
        return 1
    fi

    echo "${pkg[1]}"
}

get_pkg_entry() {
    local name

    name="$(get_pkg_name "$1")" || return $?

    if ! entry="$(pacman -Ss "$name" | grep -m 1 "$1")"; then
        echo "$1 not found" >&2
        return 1
    fi

    if [[ "${2-}" == 'installed' ]]; then
        echo "$entry"
    else
        echo "${entry%\[installed\]}"
    fi
}

add_pkg() {
    local entry

    entry="$(get_pkg_entry "$1")" || return $?

    if [[ -e "$cache" ]]; then
        if grep -q "$entry" "$cache"; then
            echo "$1 is already tracked" >&2
            return 1
        fi

        if grep -q "$1" "$cache"; then
            sed -i "s/$(escape_slash "$1")\s/$entry/" "$cache"
            echo "tracked version for $1 updated"
        fi
    else
        mkdir -p "$(dirname "$cache")"
    fi

    echo "$entry" >> "$cache"
    echo "$entry"
}

remove_pkg() {
    if ! grep -q "$1" "$cache"; then
        echo "$1 is not tracked" >&2
        return 1
    fi

    sed -i "/$(escape_slash "$1")\s/d" "$cache"
    echo "$1"
}

process_pkgs() {
    local func="$1"
    shift
    local r=0

    [[ $# -eq 0 ]] && { usage >&2; exit 2; }

    for pkg in "$@"; do
        $func "$pkg" || (( r+=1 ))
    done

    exit $r
}

replace_updated() {
    local -a entry=($1)

    if [[ "${2-}" == '-a' \
              || $(vercmp "${entry[1]}" "${entry[2]}") -lt 0 ]]; then
        local old="${entry[0]} ${entry[1]}"
        local new="${entry[0]} ${entry[2]}"
        sed -i "s/$(escape_slash "$old")/$new/" "$cache"
    fi
}

remove_updated() {
    local -a entry=($1)

    if [[ "${2-}" == '-a' \
              || $(vercmp "${entry[1]}" "${entry[2]}") -lt 0 ]]; then
        if [[ -n "${2-}" || -n "${entry[3]-}" ]]; then
            local old="${entry[0]} ${entry[1]}"
            sed -i "/$(escape_slash "$old")/d" "$cache"
        fi
    fi
}

modify_cache() {
    local func="$1"
    shift
    local -a entries=()
    local r=0

    while read -r pkg ver; do
        if entry=($(get_pkg_entry "$pkg" installed)); then
            entries+=("$pkg $ver ${entry[1]} ${entry[2]-}")
        else
            (( r+=1 ))
        fi
    done < "$cache"

    for entry in "${entries[@]}"; do
        $func "$entry" "$@"
    done

    exit $r
}

status() {
    local updated_sym='✓'
    local sym='𐄂'
    local installed='[installed]'
    local r=0
    local updates=false
    local vcmp
    local msg

    if [[ ! -s "$cache" ]]; then
        echo "no tracked packages" >&2
        exit 1
    fi

    if [[ -t 1 ]]; then
        updated_sym="\033[0;32m$updated_sym\033[0m"
        sym="\033[0;31m$sym\033[0m"
        installed="\033[0;34m$installed\033[0m"
    fi

    [[ "${1-}" == '-u' ]] && updates=true

    while read -r pkg ver; do
        if ! entry=($(get_pkg_entry "$pkg" installed)); then
            (( r+=1 ))
            continue
        fi

        vcmp=$(vercmp "$ver" "${entry[1]}")

        if [[ $vcmp -eq 0 ]]; then
            $updates || echo -e "$sym $pkg $ver"
        else
            msg="$pkg $ver -> ${entry[1]}"
            [[ -n "${entry[2]-}" ]] && msg+=" $installed"

            if [[ $vcmp -gt 0 ]]; then
                $updates && continue
                echo -e "$sym $msg"
            else
                echo -e "$updated_sym $msg"
            fi
        fi
    done < "$cache"

    exit $r
}

[[ $# -eq 0 || "$1" == '-u' ]] && status "$@"

case "$1" in
    add) shift; process_pkgs add_pkg "$@" ;;
    remove|rm) shift; process_pkgs remove_pkg "$@" ;;
    update) shift; modify_cache replace_updated "$@" ;;
    prune) shift; modify_cache remove_updated "$@" ;;
    status) shift; status "$@" ;;
    *) usage >&2; exit 2
esac
